// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using NgQuestion.WebApi.Tests;
using NgQuestion.WebApi.Tests.Models;

namespace NgQuestion.WebApi.Tests
{
    public static partial class BoardOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Board DeleteBoard(this IBoardOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBoardOperations)s).DeleteBoardAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Board> DeleteBoardAsync(this IBoardOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<NgQuestion.WebApi.Tests.Models.Board> result = await operations.DeleteBoardWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Board GetBoard(this IBoardOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBoardOperations)s).GetBoardAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Board> GetBoardAsync(this IBoardOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<NgQuestion.WebApi.Tests.Models.Board> result = await operations.GetBoardWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        public static IList<Board> GetBoards(this IBoardOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBoardOperations)s).GetBoardsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Board>> GetBoardsAsync(this IBoardOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<NgQuestion.WebApi.Tests.Models.Board>> result = await operations.GetBoardsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='board'>
        /// Required.
        /// </param>
        public static Board PostBoard(this IBoardOperations operations, Board board)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBoardOperations)s).PostBoardAsync(board);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='board'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Board> PostBoardAsync(this IBoardOperations operations, Board board, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<NgQuestion.WebApi.Tests.Models.Board> result = await operations.PostBoardWithOperationResponseAsync(board, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='board'>
        /// Required.
        /// </param>
        public static object PutBoard(this IBoardOperations operations, int id, Board board)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBoardOperations)s).PutBoardAsync(id, board);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the NgQuestion.WebApi.Tests.IBoardOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='board'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutBoardAsync(this IBoardOperations operations, int id, Board board, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutBoardWithOperationResponseAsync(id, board, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
