// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;
using NgQuestion.WebApi.Tests.Models;

namespace NgQuestion.WebApi.Tests.Models
{
    public partial class Board
    {
        private int? _id;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public int? Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IList<Question> _questions;
        
        /// <summary>
        /// Optional.
        /// </summary>
        public IList<Question> Questions
        {
            get { return this._questions; }
            set { this._questions = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the Board class.
        /// </summary>
        public Board()
        {
            this.Questions = new LazyList<Question>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken idValue = inputObject["Id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.Id = ((int)idValue);
                }
                JToken nameValue = inputObject["Name"];
                if (nameValue != null && nameValue.Type != JTokenType.Null)
                {
                    this.Name = ((string)nameValue);
                }
                JToken questionsSequence = ((JToken)inputObject["Questions"]);
                if (questionsSequence != null && questionsSequence.Type != JTokenType.Null)
                {
                    foreach (JToken questionsValue in ((JArray)questionsSequence))
                    {
                        Question question = new Question();
                        question.DeserializeJson(questionsValue);
                        this.Questions.Add(question);
                    }
                }
            }
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type Board
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.Id != null)
            {
                outputObject["Id"] = this.Id.Value;
            }
            if (this.Name != null)
            {
                outputObject["Name"] = this.Name;
            }
            JArray questionsSequence = null;
            if (this.Questions != null)
            {
                if (this.Questions is ILazyCollection<Question> == false || ((ILazyCollection<Question>)this.Questions).IsInitialized)
                {
                    questionsSequence = new JArray();
                    outputObject["Questions"] = questionsSequence;
                    foreach (Question questionsItem in this.Questions)
                    {
                        if (questionsItem != null)
                        {
                            questionsSequence.Add(questionsItem.SerializeJson(null));
                        }
                    }
                }
            }
            return outputObject;
        }
    }
}
